// src/Avatar/index.ts
import * as Avatar from "@radix-ui/react-avatar";

// src/Avatar/StyledAvatar.tsx
import { nanoid } from "nanoid";
import { useEffect, useState } from "react";
import stringHash from "string-hash";
import tinycolor from "tinycolor2";
import * as AvatarPrimitive from "@radix-ui/react-avatar";
import { styled } from "@stitches/react";
import { jsx, jsxs } from "react/jsx-runtime";
var Root2 = styled(AvatarPrimitive.Root, {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  verticalAlign: "middle",
  overflow: "hidden",
  userSelect: "none"
});
var Image2 = styled(AvatarPrimitive.Image, {
  width: "100%",
  height: "100%",
  objectFit: "cover",
  borderRadius: "inherit"
});
var StyledFallback = styled(AvatarPrimitive.Fallback, {
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  width: "100%",
  height: "100%",
  borderRadius: "inherit"
});
var GradientSvg = styled("svg", {
  position: "absolute",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  borderRadius: "inherit"
});
var Fallback2 = ({
  id,
  name,
  randomColor,
  children,
  ...props
}) => {
  const [fallbackId, setFallbackId] = useState("");
  useEffect(() => {
    setFallbackId(id ?? name ?? nanoid());
  }, [id, name]);
  if (randomColor) {
    const encodedName = encodeURI(fallbackId.toString().split(" ").join("_"));
    const hashed = stringHash(encodedName);
    const c = tinycolor({ h: hashed % 360, s: 0.95, l: 0.5 });
    const c1 = c.toHexString();
    const c2 = c.triad()[1].toHexString();
    const gradientBackground = /* @__PURE__ */ jsxs(GradientSvg, {
      role: "img",
      "aria-label": name,
      viewBox: "0 0 80 80",
      children: [
        /* @__PURE__ */ jsx("defs", {
          children: /* @__PURE__ */ jsxs("linearGradient", {
            x1: "0%",
            y1: "0%",
            x2: "100%",
            y2: "100%",
            id: hashed.toString(),
            children: [
              /* @__PURE__ */ jsx("stop", {
                stopColor: c1,
                offset: "0%"
              }),
              /* @__PURE__ */ jsx("stop", {
                stopColor: c2,
                offset: "100%"
              })
            ]
          })
        }),
        /* @__PURE__ */ jsx("g", {
          stroke: "none",
          strokeWidth: "1",
          fill: "none",
          children: /* @__PURE__ */ jsx("rect", {
            fill: `url(#${hashed.toString()})`,
            x: "0",
            y: "0",
            width: "100%",
            height: "100%"
          })
        })
      ]
    });
    return /* @__PURE__ */ jsxs(StyledFallback, {
      ...props,
      children: [
        gradientBackground,
        children
      ]
    });
  }
  return /* @__PURE__ */ jsx(StyledFallback, {
    ...props,
    children
  });
};
var StyledAvatar = Object.assign({}, { Root: Root2, Image: Image2, Fallback: Fallback2 });

// src/DropdownMenu/DropdownMenu.tsx
import * as DropdownMenu from "@radix-ui/react-dropdown-menu";

// src/ScrollArea/ScrollArea.tsx
import * as ScrollArea from "@radix-ui/react-scroll-area";

// src/Stacked/Stacked.tsx
import * as React from "react";
import { clsxm } from "@zolplay/utils";
import { jsx as jsx2 } from "react/jsx-runtime";
var LAYER_INCREMENT = 1;
var zLayers = Object.freeze({
  base: 0,
  content: 50,
  dropdown: 1e3,
  sticky: 2e3,
  modalBackdrop: 3e3,
  offCanvas: 4e3,
  modal: 5e3,
  popover: 6e3,
  tooltip: 7e3,
  ceiling: 1e4
});
var Stacked = ({
  className,
  children,
  layer = "content",
  as,
  above,
  below
}) => {
  React.useEffect(() => {
    if (above && below) {
      throw new Error("Cannot use both above and below props");
    }
  }, [above, below]);
  const zIndex = React.useMemo(() => {
    const layerIndex = zLayers[layer];
    if (above) {
      return layerIndex + LAYER_INCREMENT * (typeof above === "number" ? above : 1);
    } else if (below) {
      return layerIndex - LAYER_INCREMENT * (typeof below === "number" ? below : 1);
    }
    return layerIndex;
  }, [layer, above, below]);
  const Element = as || "div";
  return /* @__PURE__ */ jsx2(Element, {
    className: clsxm("relative", className),
    style: {
      zIndex
    },
    children
  });
};
export {
  Avatar,
  DropdownMenu,
  ScrollArea,
  Stacked,
  StyledAvatar,
  zLayers
};
