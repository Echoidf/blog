'use client';
import { jsx as _jsx } from "react/jsx-runtime";
import swr from 'swr';
import { TwitterApiError } from './api/index.js';
import { defaultComponents } from './components.js';
import { EmbeddedTweet } from './embedded-tweet.js';
import { TweetSkeleton } from './tweet-skeleton.js';
const host = 'https://react-tweet.vercel.app';
// Avois an error when used in the pages directory where useSWR might be in `default`.
const useSWR = swr.default || swr;
async function fetcher(url) {
    const res = await fetch(url);
    const json = await res.json();
    if (res.ok) return json.data;
    throw new TwitterApiError({
        message: `Failed to fetch tweet at "${url}" with "${res.status}".`,
        data: json,
        status: res.status
    });
}
export const Tweet = ({ id , apiUrl , fallback =/*#__PURE__*/ _jsx(TweetSkeleton, {}) , components , onError  })=>{
    const { data , error , isLoading  } = useSWR(apiUrl || !apiUrl && id && `${host}/api/tweet/${id}`, fetcher, {
        revalidateIfStale: false,
        revalidateOnFocus: false,
        shouldRetryOnError: false
    });
    if (isLoading) return fallback;
    if (error || !data) {
        const TweetNotFound = (components == null ? void 0 : components.TweetNotFound) || defaultComponents.TweetNotFound;
        return /*#__PURE__*/ _jsx(TweetNotFound, {
            error: onError ? onError(error) : error
        });
    }
    return /*#__PURE__*/ _jsx(EmbeddedTweet, {
        tweet: data,
        components: components
    });
};
